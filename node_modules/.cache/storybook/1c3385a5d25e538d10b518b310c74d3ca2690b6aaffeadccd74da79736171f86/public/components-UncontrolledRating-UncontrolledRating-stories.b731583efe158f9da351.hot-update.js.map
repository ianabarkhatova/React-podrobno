{"version":3,"file":"components-UncontrolledRating-UncontrolledRating-stories.b731583efe158f9da351.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;;AAEA;AACA;AAAA;AASA;AAAA;AAAA;;AAEA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAaA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AAAA;AAhCA;AAyCA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA","sources":["webpack://cra-console/./src/components/UncontrolledRating/UncontrolledRating.tsx"],"sourcesContent":["import React, {useState} from \"react\";\n\n//создать тип компонента:\n//это объект, у которого есть свойство value, являющееся number.\n\nexport type RatingValuePropsType = 0 | 1 | 2 | 3 | 4 | 5\n\ntype UncontrolledRatingPropsType = {\n    defaultValue?: RatingValuePropsType\n    onChange: (value: RatingValuePropsType) => void\n}\n\nexport function UncontrolledRating(props: UncontrolledRatingPropsType) { // props должны являться объектом, который соответствует описанию RatingPropsType (выше)\n\n    let [value, setValue] = useState<RatingValuePropsType>(props.defaultValue ? props.defaultValue: 0 )\n\n    return (<div>\n        <Star selected={value > 0} setValue={() => { setValue(1); props.onChange(1); }} />\n        <Star selected={value > 1} setValue={() => { setValue(2); props.onChange(2); }} />\n        <Star selected={value > 2} setValue={() => { setValue(3); props.onChange(3); }} />\n        <Star selected={value > 3} setValue={() => { setValue(4); props.onChange(4); }} />\n        <Star selected={value > 4} setValue={() => { setValue(5); props.onChange(5); }} />\n\n        {/*<Star selected={value > 0}/>*/}\n        {/*<button onClick={() => {setValue(1)}}>1</button>*/}\n        {/*<Star selected={value > 1}/>*/}\n        {/*<button onClick={() => {setValue(2)}}>2</button>*/}\n        {/*<Star selected={value > 2}/>*/}\n        {/*<button onClick={() => {setValue(3)}}>3</button>*/}\n        {/*<Star selected={value > 3}/>*/}\n        {/*<button onClick={() => {setValue(4)}}>4</button>*/}\n        {/*<Star selected={value > 4}/>*/}\n        {/*<button onClick={() => {setValue(5)}}>5</button>*/}\n    </div>)\n}\n\n/*if we want to return a group of elements, we need to wrap them in one parent element (below).\nOnly one element can be returned.*/\n\n/*Props - те данные, которые входят в компонент для того, чтобы компонент мог на основе этих данных\nсделать другую отрисовку*/\n\n//Компонент ждет входные данные, чтобы отрисоваться по-разному, отреагировать на то, что в него передают.\n\n// На входе мы дает компоненту объект, этот объект приходит в аттрибут функции, который называется props,\n\ntype StarPropsType = {\n    selected: boolean\n    setValue: () => void\n    // setValue: (value: 1 | 2 | 3 | 4 | 5) => void\n    // value: 1 | 2 | 3 | 4 | 5\n}\n\nfunction Star(props: StarPropsType) {\n    return <span onClick={()=> props.setValue()}>\n          {props.selected ? <b>star </b> : \"star \"}\n      </span>\n}\n\n"],"names":[],"sourceRoot":""}