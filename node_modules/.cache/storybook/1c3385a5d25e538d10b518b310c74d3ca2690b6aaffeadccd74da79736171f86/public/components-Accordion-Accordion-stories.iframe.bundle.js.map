{"version":3,"file":"components-Accordion-Accordion-stories.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;ACPA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AAGA;AAGA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvCA;;AAEA;AAAA;AAOA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAQA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA","sources":["webpack://cra-console/./node_modules/@storybook/addon-actions/dist/chunk-454WOBUV.mjs","webpack://cra-console/./node_modules/@storybook/addon-actions/dist/index.mjs","webpack://cra-console/./src/components/Accordion/Accordion.stories.tsx","webpack://cra-console/./src/components/Accordion/Accordion.tsx"],"sourcesContent":["import { v4 } from 'uuid';\nimport { addons } from 'storybook/internal/preview-api';\nimport { global } from '@storybook/global';\nimport { ImplicitActionsDuringRendering } from 'storybook/internal/preview-errors';\n\nvar PARAM_KEY=\"actions\",ADDON_ID=\"storybook/actions\",PANEL_ID=`${ADDON_ID}/panel`,EVENT_ID=`${ADDON_ID}/action-event`,CLEAR_ID=`${ADDON_ID}/action-clear`,CYCLIC_KEY=\"$___storybook.isCyclic\";var config={depth:10,clearOnStoryChange:!0,limit:50},configureActions=(options={})=>{Object.assign(config,options);};var findProto=(obj,callback)=>{let proto=Object.getPrototypeOf(obj);return !proto||callback(proto)?proto:findProto(proto,callback)},isReactSyntheticEvent=e=>!!(typeof e==\"object\"&&e&&findProto(e,proto=>/^Synthetic(?:Base)?Event$/.test(proto.constructor.name))&&typeof e.persist==\"function\"),serializeArg=a=>{if(isReactSyntheticEvent(a)){let e=Object.create(a.constructor.prototype,Object.getOwnPropertyDescriptors(a));e.persist();let viewDescriptor=Object.getOwnPropertyDescriptor(e,\"view\"),view=viewDescriptor?.value;return typeof view==\"object\"&&view?.constructor.name===\"Window\"&&Object.defineProperty(e,\"view\",{...viewDescriptor,value:Object.create(view.constructor.prototype)}),e}return a},generateId=()=>typeof crypto==\"object\"&&typeof crypto.getRandomValues==\"function\"?v4():Date.now().toString(36)+Math.random().toString(36).substring(2);function action(name,options={}){let actionOptions={...config,...options},handler=function(...args){if(options.implicit){let storyRenderer=(\"__STORYBOOK_PREVIEW__\"in global?global.__STORYBOOK_PREVIEW__:void 0)?.storyRenders.find(render=>render.phase===\"playing\"||render.phase===\"rendering\");if(storyRenderer){let deprecated=!window?.FEATURES?.disallowImplicitActionsInRenderV8,error=new ImplicitActionsDuringRendering({phase:storyRenderer.phase,name,deprecated});if(deprecated)console.warn(error);else throw error}}let channel=addons.getChannel(),id=generateId(),minDepth=5,serializedArgs=args.map(serializeArg),normalizedArgs=args.length>1?serializedArgs:serializedArgs[0],actionDisplayToEmit={id,count:0,data:{name,args:normalizedArgs},options:{...actionOptions,maxDepth:minDepth+(actionOptions.depth||3),allowFunction:actionOptions.allowFunction||!1}};channel.emit(EVENT_ID,actionDisplayToEmit);};return handler.isAction=!0,handler.implicit=options.implicit,handler}var actions=(...args)=>{let options=config,names=args;names.length===1&&Array.isArray(names[0])&&([names]=names),names.length!==1&&typeof names[names.length-1]!=\"string\"&&(options={...config,...names.pop()});let namesObject=names[0];(names.length!==1||typeof namesObject==\"string\")&&(namesObject={},names.forEach(name=>{namesObject[name]=name;}));let actionsObject={};return Object.keys(namesObject).forEach(name=>{actionsObject[name]=action(namesObject[name],options);}),actionsObject};\n\nexport { ADDON_ID, CLEAR_ID, CYCLIC_KEY, EVENT_ID, PANEL_ID, PARAM_KEY, action, actions, config, configureActions };\n","export { ADDON_ID, CLEAR_ID, CYCLIC_KEY, EVENT_ID, PANEL_ID, PARAM_KEY, action, actions, config, configureActions } from './chunk-454WOBUV.mjs';\n","import {action} from '@storybook/addon-actions';\n\nimport {Accordion} from './Accordion';\nimport React, {useState} from \"react\";\n\n// const meta: Meta<typeof Accordion> = {\n//     component: Accordion,\n// };\n\n// export default meta;\n// type Story = StoryObj<typeof Accordion>;\n//\n// export const FirstStory: Story = {\n//     args: {\n//         titleValue: \"hello\",\n//         closed: false,\n//     },\n// }\n\nexport default  {\n    component: Accordion\n}\n\nconst onChangeHandler = action('onChange')\n\n\nexport const ClosedAccordion = () => {\n    return <Accordion titleValue={\"Closed Accordion\"}\n                      closed={true}\n                      onChange={onChangeHandler}/>\n}\n\nexport const OpenedAccordion = () => {\n    return <Accordion titleValue={\"Opened Accordion\"}\n                      closed={false}\n                      onChange={() => {\n                      }}/>\n}\n\nexport const AccordionDemo = () => {\n    const [closed, setClosed] = useState(false)\n    return <Accordion titleValue={\"Accordion Demo\"}\n                      closed={closed}\n                      onChange={() => {\n                          setClosed(!closed)\n                      }}/>\n}\n","import React from 'react';\n\n//рядом с компонентом лежит тип, который определяет, что компонент должен принимать:\ntype AccordionPropsType = {\n    titleValue: string\n    closed?: boolean\n    onChange: () => void\n}\n\nexport function Accordion(props: AccordionPropsType) {\n            return <div>\n                <AccordionTitle\n                    title={props.titleValue}\n                    onChange={props.onChange}/>\n                { !props.closed && <AccordionBody/> }\n            </div>\n}\n\n\ntype AccordionTitlePropsType = {\n    title: string\n    onChange: () => void\n}\n\nfunction AccordionTitle(props: AccordionTitlePropsType) {\n\n    return (\n        <div><h3 onClick={(event) => props.onChange()}>{props.title}</h3></div> // Step 5\n    )\n}\n\nfunction AccordionBody() {\n\n    return (\n        <div>\n            <ul>\n                <li>1</li>\n                <li>2</li>\n                <li>3</li>\n            </ul>\n        </div>\n    )\n}\n\n"],"names":[],"sourceRoot":""}