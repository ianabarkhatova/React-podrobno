{"version":3,"file":"components-Rating-Rating-stories.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;AACA;AAAA;AAEA;AACA;AACA;AAAA;;AAGA;;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClBA;;AAEA;AACA;AAAA;AASA;AAAA;;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AAAA;AAQA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA","sources":["webpack://cra-console/./src/components/Rating/Rating.stories.tsx","webpack://cra-console/./src/components/Rating/Rating.tsx"],"sourcesContent":["import {action} from '@storybook/addon-actions';\nimport {Rating, RatingValuePropsType} from './Rating';\nimport React, {useState} from \"react\";\n\nexport default  {\n    title: \"Rating\",\n    component: Rating\n}\n\n// const onChangeHandler = action('onChange')\n\n\nexport const EmptyStars = () => <Rating value={0} onClick={(x) => x}/>;\nexport const Rating1 = () => <Rating value={1} onClick={(x) => x}/>;\nexport const Rating2 = () => <Rating value={2} onClick={(x) => x}/>;\nexport const Rating3 = () => <Rating value={3} onClick={(x) => x}/>;\nexport const Rating4 = () => <Rating value={4} onClick={(x) => x}/>;\nexport const Rating5 = () => <Rating value={5} onClick={(x) => x}/>;\nexport const RatingChange = () => {\n    const [rating, setRating] = useState<RatingValuePropsType>(5);\n    return <Rating value={rating} onClick={setRating}/>;\n}","import React from \"react\";\n\n//создать тип компонента:\n//это объект, у которого есть свойство value, являющееся number.\n\nexport type RatingValuePropsType = 0 | 1 | 2 | 3 | 4 | 5\n\ntype RatingPropsType = {\n    value: RatingValuePropsType\n    onClick: (value: RatingValuePropsType) => void\n}\n\nexport function Rating(props: RatingPropsType) { // props должны являться объектом, который соответствует описанию RatingPropsType (выше)\n\n    return (<div>\n        <Star selected={props.value > 0} onClick={props.onClick} value={1}/>\n        <Star selected={props.value > 1} onClick={props.onClick} value={2}/>\n        <Star selected={props.value > 2} onClick={props.onClick} value={3}/>\n        <Star selected={props.value > 3} onClick={props.onClick} value={4}/>\n        <Star selected={props.value > 4} onClick={props.onClick} value={5}/>\n    </div>)\n}\n\n/*if we want to return a group of elements, we need to wrap them in one parent element (below).\nOnly one element can be returned.*/\n\n/*Props - те данные, которые входят в компонент для того, чтобы компонент мог на основе этих данных\nсделать другую отрисовку*/\n\n//Компонент ждет входные данные, чтобы отрисоваться по-разному, отреагировать на то, что в него передают.\n\n// На входе мы дает компоненту объект, этот объект приходит в аттрибут функции, который называется props,\n\ntype StarPropsType = {\n    selected: boolean\n    onClick: (value: RatingValuePropsType) => void\n    value: RatingValuePropsType\n}\n\nfunction Star(props: StarPropsType) {\n    return <span onClick={() => {\n        props.onClick(props.value)\n    }}>\n        {props.selected ? <b>star </b> : \"star \"}\n      </span>\n}\n\n"],"names":[],"sourceRoot":""}